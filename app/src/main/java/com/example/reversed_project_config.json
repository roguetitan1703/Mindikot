{
    "project_name": "mindikot",
    "structure": {
        "core": {
            "engine": {
                "DeckGenerator.kt": "package com.example.mindikot.core.engine\n\nimport com.example.mindikot.core.model.*\n\nobject DeckGenerator {\n    /**\n     * @param includeTwos true for 4\u00e2\u20ac\u2018player games (include TWO); false for 6\u00e2\u20ac\u2018player (exclude THREE).\n     */\n    fun generateDeck(includeTwos: Boolean): MutableList<Card> {\n        val deck = mutableListOf<Card>()\n        for (suit in Suit.values()) {\n            for (rank in Rank.values()) {\n                if (!includeTwos && rank == Rank.THREE) continue\n                deck.add(Card(suit, rank))\n            }\n        }\n        return deck.shuffled().toMutableList()\n    }\n}\n",
                "GameEngine.kt": "package com.example.mindikot.core.engine\n\nimport com.example.mindikot.core.model.*\nimport com.example.mindikot.core.state.GameState\n\nobject GameEngine {\n    /**\n     * Play a single trick, collect cards, and return next leader index.\n     *\n     * @param state current GameState\n     * @param leaderIndex index of player leading this trick\n     * @return index of trick winner\n     */\n    fun playTrick(state: GameState, leaderIndex: Int): Int {\n        val trickPlays = mutableListOf<Pair<Player, Card>>()\n        val players = state.players\n        val trump = state.trumpSuit\n\n        // Each player plays top card\n        for (i in players.indices) {\n            val idx = (leaderIndex + i) % players.size\n            val player = players[idx]\n            val card = player.hand.removeAt(0)\n            trickPlays.add(player to card)\n        }\n\n        // Determine winner and collect cards\n        val winner = TrickHandler.determineTrickWinner(trickPlays, trump)\n        state.teams.first { it.id == winner.teamId }\n            .collectedCards.addAll(trickPlays.map { it.second })\n\n        return players.indexOf(winner)\n    }\n}\n",
                "RoundEvaluator.kt": "package com.example.mindikot.core.engine\n\nimport com.example.mindikot.core.model.*\n\nobject RoundEvaluator {\n    data class RoundResult(val winningTeam: Team, val isKot: Boolean)\n\n    /**\n     * Evaluate end-of-round: if any team has all 4 tens \u00e2\u2020\u2019 Kot, else majority of tens.\n     */\n    fun evaluateRound(teams: List<Team>): RoundResult {\n        // Instant Kot\n        teams.find { it.hasKot() }?.let { return RoundResult(it, true) }\n\n        // Otherwise pick team with most tens\n        val winner = teams.maxBy { it.countTens() }\n        return RoundResult(winner, false)\n    }\n}\n",
                "TrickHandler.kt": "package com.example.mindikot.core.engine\n\nimport com.example.mindikot.core.model.*\n\nobject TrickHandler {\n    /**\n     * Determine trick winner based on lead suit and trump.\n     *\n     * @param playedCards list of (Player to Card) in play order\n     * @param trumpSuit current trump suit (or null)\n     * @return winning Player\n     */\n    fun determineTrickWinner(\n        playedCards: List<Pair<Player, Card>>,\n        trumpSuit: Suit?\n    ): Player {\n        val leadSuit = playedCards.first().second.suit\n\n        // Score each play: trump +100, lead-suit + rank, else 0\n        val scored = playedCards.map { (player, card) ->\n            val score = when {\n                card.suit == trumpSuit -> card.rank.value + 100\n                card.suit == leadSuit -> card.rank.value\n                else -> 0\n            }\n            Triple(player, card, score)\n        }\n\n        // Highest score wins\n        return scored.maxBy { it.third }.first\n    }\n}\n",
                "TrumpHandler.kt": "package com.example.mindikot.core.engine\n\nimport com.example.mindikot.core.model.Card\nimport com.example.mindikot.core.model.Player\nimport com.example.mindikot.core.model.Suit\nimport com.example.mindikot.core.model.GameMode\nimport com.example.mindikot.core.state.GameState\n\nobject TrumpHandler {\n    fun handleTrumpSelection(\n        state: GameState,\n        player: Player,\n        chosenSuit: Suit? = null,\n        passDiscard: Card? = null\n    ) {\n        when (state.gameMode) {\n            GameMode.CHOOSE_WHEN_EMPTY -> {\n                require(chosenSuit != null) { \"Must choose a suit in CHOOSE_WHEN_EMPTY mode.\" }\n                state.trumpSuit = chosenSuit\n                state.trumpRevealed = true\n            }\n            GameMode.FIRST_CARD_HIDDEN -> {\n                if (!state.trumpRevealed) {\n                    if (state.hiddenCard == null) {\n                        state.hiddenCard = player.hand.random().also { player.hand.remove(it) }\n                    } else if (chosenSuit != null) {\n                        state.trumpSuit = state.hiddenCard!!.suit\n                        state.trumpRevealed = true\n                    } else if (passDiscard != null) {\n                        require(passDiscard.suit != state.hiddenCard!!.suit) { \"Cannot discard a trump card.\" }\n                        player.hand.remove(passDiscard)\n                    }\n                }\n            }\n        }\n    }\n}\n"
            },
            "main.py": "from pathlib import Path\n\n# base_dir = Path(\"/mnt/data/mindikot/src/main/java/com/example/mindikot/core\")\nbase_dir = Path(\"src/main/java/com/example/mindikot/core\")\n\n# All file paths relative to base_dir with updated content\nupdated_files_content = {\n    \"model/Card.kt\": \"\"\"\npackage com.example.mindikot.core.model\n\ndata class Card(val suit: Suit, val rank: Rank) {\n    override fun toString(): String = \"${'$'}rank of ${'$'}suit\"\n}\n\"\"\",\n    \"model/Suit.kt\": \"\"\"\npackage com.example.mindikot.core.model\n\nenum class Suit {\n    HEARTS, DIAMONDS, CLUBS, SPADES\n}\n\"\"\",\n    \"model/Rank.kt\": \"\"\"\npackage com.example.mindikot.core.model\n\nenum class Rank(val value: Int) {\n    THREE(3), FOUR(4), FIVE(5), SIX(6), SEVEN(7), EIGHT(8), NINE(9),\n    TEN(10), JACK(11), QUEEN(12), KING(13), ACE(14)\n}\n\"\"\",\n    \"model/Player.kt\": \"\"\"\npackage com.example.mindikot.core.model\n\ndata class Player(val id: Int, val name: String, val teamId: Int, val hand: MutableList<Card> = mutableListOf()) {\n    override fun toString() = \"Player(id=${'$'}id, name=${'$'}name, team=${'$'}teamId)\"\n}\n\"\"\",\n    \"model/Team.kt\": \"\"\"\npackage com.example.mindikot.core.model\n\ndata class Team(val id: Int, val players: List<Player>, val collectedCards: MutableList<Card> = mutableListOf()) {\n    fun countTens(): Int = collectedCards.count { it.rank == Rank.TEN }\n    fun hasKot(): Boolean = countTens() == 4\n}\n\"\"\",\n    \"model/GameMode.kt\": \"\"\"\npackage com.example.mindikot.core.model\n\nenum class GameMode {\n    CHOOSE_WHEN_EMPTY,\n    FIRST_CARD_HIDDEN\n}\n\"\"\",\n    \"engine/DeckGenerator.kt\": \"\"\"\npackage com.example.mindikot.core.engine\n\nimport com.example.mindikot.core.model.*\n\nobject DeckGenerator {\n    fun generateDeck(includeTwos: Boolean): MutableList<Card> {\n        val deck = mutableListOf<Card>()\n        for (suit in Suit.values()) {\n            for (rank in Rank.values()) {\n                if (!includeTwos && rank == Rank.THREE) continue\n                deck.add(Card(suit, rank))\n            }\n        }\n        return deck.shuffled().toMutableList()\n    }\n}\n\"\"\",\n    \"engine/TrickHandler.kt\": \"\"\"\npackage com.example.mindikot.core.engine\n\nimport com.example.mindikot.core.model.*\n\nobject TrickHandler {\n    fun determineTrickWinner(playedCards: List<Pair<Player, Card>>, trumpSuit: Suit?): Player {\n        val leadSuit = playedCards.first().second.suit\n        val validCards = playedCards.map { (player, card) ->\n            val score = when {\n                card.suit == trumpSuit -> card.rank.value + 100\n                card.suit == leadSuit -> card.rank.value\n                else -> 0\n            }\n            Triple(player, card, score)\n        }\n        return validCards.maxBy { it.third }.first\n    }\n}\n\"\"\",\n    \"engine/TrumpHandler.kt\": \"\"\"\npackage com.example.mindikot.core.engine\n\nimport com.example.mindikot.core.model.*\n\nobject TrumpHandler {\n    fun chooseTrumpFromHand(player: Player): Suit {\n        return player.hand.groupingBy { it.suit }.eachCount().maxBy { it.value }.key\n    }\n}\n\"\"\",\n    \"engine/RoundEvaluator.kt\": \"\"\"\npackage com.example.mindikot.core.engine\n\nimport com.example.mindikot.core.model.*\n\nobject RoundEvaluator {\n    data class RoundResult(val winningTeam: Team, val isKot: Boolean)\n\n    fun evaluateRound(teams: List<Team>): RoundResult {\n        val teamWithKot = teams.find { it.hasKot() }\n        return if (teamWithKot != null) {\n            RoundResult(teamWithKot, true)\n        } else {\n            val team = teams.maxBy { it.countTens() }\n            RoundResult(team, false)\n        }\n    }\n}\n\"\"\",\n    \"engine/GameEngine.kt\": \"\"\"\npackage com.example.mindikot.core.engine\n\nimport com.example.mindikot.core.model.*\nimport com.example.mindikot.core.state.GameState\n\nobject GameEngine {\n    fun playTrick(state: GameState, leaderIndex: Int): Int {\n        val trickCards = mutableListOf<Pair<Player, Card>>()\n        val players = state.players\n        val trumpSuit = state.trumpSuit\n\n        for (i in 0 until players.size) {\n            val currentPlayer = players[(leaderIndex + i) % players.size]\n            val playableCard = currentPlayer.hand.removeAt(0)\n            trickCards.add(currentPlayer to playableCard)\n        }\n\n        val winner = TrickHandler.determineTrickWinner(trickCards, trumpSuit)\n        val team = state.teams.first { it.id == winner.teamId }\n        team.collectedCards.addAll(trickCards.map { it.second })\n\n        return players.indexOf(winner)\n    }\n}\n\"\"\",\n    \"state/GameState.kt\": \"\"\"\npackage com.example.mindikot.core.state\n\nimport com.example.mindikot.core.model.*\n\ndata class GameState(\n    val players: List<Player>,\n    val teams: List<Team>,\n    val gameMode: GameMode,\n    var trumpSuit: Suit? = null,\n    var hiddenTrumpCard: Card? = null\n)\n\"\"\"\n}\n\n# Write each updated file\nfor relative_path, content in updated_files_content.items():\n    path = base_dir / relative_path\n    path.parent.mkdir(parents=True, exist_ok=True)\n    path.write_text(content.strip())\n\n\"\u00e2\u0153\u2026 All specified files were created/updated with actual logic.\"\n",
            "model": {
                "Card.kt": "package com.example.mindikot.core.model\n\ndata class Card(val suit: Suit, val rank: Rank) {\n    override fun toString(): String = \"$rank of $suit\"\n}\n",
                "GameMode.kt": "package com.example.mindikot.core.model\n\nenum class GameMode {\n    CHOOSE_WHEN_EMPTY,\n    FIRST_CARD_HIDDEN\n}\n",
                "Player.kt": "package com.example.mindikot.core.model\n\ndata class Player(\n    val id: Int,\n    val name: String,\n    val teamId: Int,\n    var hand: MutableList<Card> = mutableListOf()\n) {\n    override fun toString() = \"Player(id=$id, name=$name, team=$teamId)\"\n}\n",
                "Rank.kt": "package com.example.mindikot.core.model\n\nenum class Rank(val value: Int) {\n    TWO(2), THREE(3), FOUR(4), FIVE(5), SIX(6),\n    SEVEN(7), EIGHT(8), NINE(9), TEN(10),\n    JACK(11), QUEEN(12), KING(13), ACE(14)\n}\n",
                "Suit.kt": "package com.example.mindikot.core.model\n\nenum class Suit {\n    HEARTS, DIAMONDS, CLUBS, SPADES\n}\n",
                "Team.kt": "package com.example.mindikot.core.model\n\ndata class Team(\n    val id: Int,\n    val players: List<Player>,\n    val collectedCards: MutableList<Card> = mutableListOf()\n) {\n    fun countTens(): Int = collectedCards.count { it.rank == Rank.TEN }\n    fun hasKot(): Boolean = countTens() == 4\n}\n"
            },
            "state": {
                "GameState.kt": "package com.example.mindikot.core.state\n\nimport com.example.mindikot.core.model.Player\nimport com.example.mindikot.core.model.Team\nimport com.example.mindikot.core.model.Suit\nimport com.example.mindikot.core.model.GameMode\nimport com.example.mindikot.core.model.Card\n\ndata class GameState(\n    val players: List<Player>,\n    val teams: List<Team>,\n    val gameMode: GameMode,\n    var currentLeaderIndex: Int = 0,\n    var trumpSuit: Suit? = null,\n    var trumpRevealed: Boolean = false,\n    var hiddenCard: Card? = null\n)\n"
            }
        },
        "GameViewModel.kt": "package com.example.mindikot\n\nimport androidx.lifecycle.ViewModel\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.setValue\nimport com.example.mindikot.core.model.*\nimport com.example.mindikot.core.state.GameState\n\nclass GameViewModel : ViewModel() {\n    var gameState by mutableStateOf(GameState(players = emptyList(), teams = emptyList(), gameMode = GameMode.CHOOSE_WHEN_EMPTY))\n        private set\n\n    var currentHand by mutableStateOf<List<Card>>(emptyList())\n\n    fun playerMakesMove(playerId: Int, card: Card) {\n        currentHand = currentHand.filter { it != card }\n    }\n\n    fun startNewRound() {\n        // Reset game state and start a new round\n    }\n\n    fun updateGameState(newState: GameState) {\n        gameState = newState\n    }\n}\n",
        "MainActivity.kt": "package com.example.mindikot\n\nimport android.os.Bundle\nimport androidx.activity.ComponentActivity\nimport androidx.activity.compose.setContent\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.material3.*\nimport androidx.compose.runtime.*\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.ui.Modifier // Ensure this import is added\nimport androidx.navigation.compose.rememberNavController\nimport com.example.mindikot.ui.MainNavHost\nimport com.example.mindikot.ui.theme.MindikotTheme\n\nclass MainActivity : ComponentActivity() {\n\n    private external fun stringFromJNI(): String\n\n    companion object {\n        init {\n            System.loadLibrary(\"mindikot\")\n        }\n    }\n\n    @OptIn(ExperimentalMaterial3Api::class) // Opt-In annotation for Material3 APIs\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n\n        setContent {\n            MindikotTheme {\n                val navController = rememberNavController()\n\n                // State to hold the native string\n                var nativeText by remember { mutableStateOf(\"\") }\n\n                // Use LaunchedEffect to call the native method and set the result\n                LaunchedEffect(Unit) {\n                    nativeText = stringFromJNI() // This will run once during composition\n                }\n\n                Scaffold(\n                    topBar = {\n                        TopAppBar(\n                            title = { Text(\"Mindikot Game\") },\n                            colors = TopAppBarDefaults.mediumTopAppBarColors()\n                        )\n                    }\n                ) { paddingValues ->\n                    // Main content is handled by MainNavHost, passing the navigation controller\n                    MainNavHost(navController = navController, modifier = Modifier.padding(paddingValues))\n                }\n            }\n        }\n    }\n}\n\n@Preview(showBackground = true)\n@Composable\nfun DefaultPreview() {\n    MindikotTheme {\n        val navController = rememberNavController()\n        MainNavHost(navController = navController)\n    }\n}\n",
        "ui": {
            "components": {
                "CardView.kt": "package com.example.mindikot.ui.components\n\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.clickable\nimport androidx.compose.material3.Card\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.unit.dp\nimport com.example.mindikot.core.model.Card\n\n@Composable\nfun CardView(card: Card, onCardSelected: (Card) -> Unit) {\n    Card(\n        modifier = Modifier\n            .padding(8.dp)\n            .clickable { onCardSelected(card) },\n        shape = MaterialTheme.shapes.medium\n    ) {\n        Text(\n            text = \"${card.rank} of ${card.suit}\",\n            style = MaterialTheme.typography.bodyMedium,\n            modifier = Modifier.padding(16.dp)\n        )\n    }\n}\n",
                "GameStatus.kt": "package com.example.mindikot.ui.components\n\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.Text\nimport androidx.compose.runtime.Composable\nimport com.example.mindikot.core.state.GameState\n\n@Composable\nfun GameStatus(gameState: GameState) {\n    Column {\n        Text(\"Round: ${gameState.gameMode}\", style = MaterialTheme.typography.headlineLarge)\n        Text(\"Current Leader: ${gameState.players[gameState.currentLeaderIndex].name}\", style = MaterialTheme.typography.bodyMedium)\n        Text(\"Trump Suit: ${gameState.trumpSuit?.name ?: \"None\"}\", style = MaterialTheme.typography.bodyMedium)\n    }\n}\n",
                "PlayerHand.kt": "package com.example.mindikot.ui.components\n\nimport androidx.compose.foundation.lazy.LazyRow\nimport androidx.compose.foundation.lazy.items // <-- Ensure this import is added\nimport androidx.compose.runtime.Composable\nimport com.example.mindikot.core.model.Card\n\n@Composable\nfun PlayerHand(cards: List<Card>, onCardSelected: (Card) -> Unit) {\n    LazyRow {\n        items(cards) { card -> // Use the items function that works with a list of objects\n            CardView(card = card, onCardSelected = onCardSelected)\n        }\n    }\n}\n"
            },
            "navigation": {
                "MainNavHost.kt": "package com.example.mindikot.ui\n\nimport androidx.compose.runtime.Composable\nimport androidx.navigation.NavHostController\nimport androidx.navigation.compose.NavHost\nimport androidx.navigation.compose.composable\nimport androidx.compose.ui.Modifier\nimport androidx.lifecycle.viewmodel.compose.viewModel\nimport com.example.mindikot.GameViewModel\nimport com.example.mindikot.ui.screens.GameScreen\nimport com.example.mindikot.ui.screens.LobbyScreen\nimport com.example.mindikot.ui.screens.ResultScreen\n\n@Composable\nfun MainNavHost(navController: NavHostController, modifier: Modifier = Modifier) {\n    NavHost(navController = navController, startDestination = \"lobby\", modifier = modifier) {\n        composable(\"lobby\") {\n            LobbyScreen(navController = navController)\n        }\n        composable(\"game\") {\n            // Use viewModel() to get an instance of GameViewModel\n            val gameViewModel: GameViewModel = viewModel()\n            GameScreen(navController = navController, viewModel = gameViewModel)\n        }\n        composable(\"result\") {\n            ResultScreen(navController = navController)\n        }\n    }\n}\n"
            },
            "screens": {
                "GameScreen.kt": "package com.example.mindikot.ui.screens\n\nimport androidx.compose.foundation.layout.*\nimport androidx.compose.foundation.lazy.LazyRow\nimport androidx.compose.material3.*\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.ui.unit.dp\nimport androidx.navigation.NavController\nimport androidx.navigation.compose.rememberNavController\nimport com.example.mindikot.GameViewModel\nimport com.example.mindikot.core.model.Card\nimport com.example.mindikot.ui.components.CardView\nimport com.example.mindikot.ui.components.GameStatus\nimport com.example.mindikot.ui.components.PlayerHand\n\n@Composable\nfun GameScreen(navController: NavController, viewModel: GameViewModel) {\n    Column(\n        modifier = Modifier\n            .fillMaxSize()\n            .padding(24.dp),\n        verticalArrangement = Arrangement.Top,\n        horizontalAlignment = Alignment.CenterHorizontally\n    ) {\n        // Game Status\n        GameStatus(gameState = viewModel.gameState)\n\n        Spacer(modifier = Modifier.height(16.dp))\n\n        // Player's Hand\n        Text(\"Your Hand\", style = MaterialTheme.typography.headlineMedium)\n        Spacer(modifier = Modifier.height(8.dp))\n        PlayerHand(cards = viewModel.currentHand) { selectedCard ->\n            // Handle card selection (e.g., play the card)\n            viewModel.playerMakesMove(playerId = 1, card = selectedCard)\n        }\n\n        Spacer(modifier = Modifier.height(16.dp))\n\n        // Action Buttons\n        Row(horizontalArrangement = Arrangement.spacedBy(16.dp)) {\n            Button(onClick = { /* Implement play card logic */ }) {\n                Text(\"Play Card\")\n            }\n\n            Button(onClick = { /* Implement pass logic */ }) {\n                Text(\"Pass\")\n            }\n        }\n\n        Spacer(modifier = Modifier.height(16.dp))\n\n        // End Round Button\n        Button(onClick = { navController.navigate(\"result\") }) {\n            Text(\"End Round\")\n        }\n    }\n}\n\n@Composable\n@Preview(showBackground = true)\nfun GameScreenPreview() {\n    // Create a mock NavController and ViewModel for the preview\n    val navController = rememberNavController()\n    val mockViewModel = GameViewModel()  // Mock view model for preview\n    GameScreen(navController = navController, viewModel = mockViewModel)\n}\n",
                "LobbyScreen.kt": "package com.example.mindikot.ui.screens\n\nimport androidx.compose.foundation.layout.*\nimport androidx.compose.material3.*\nimport androidx.compose.runtime.*\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.unit.dp\nimport androidx.navigation.NavController\n\n@Composable\nfun LobbyScreen(navController: NavController) {\n    var playerName by remember { mutableStateOf(\"\") }\n    var gameMode by remember { mutableStateOf(\"CHOOSE_WHEN_EMPTY\") }\n\n    Column(\n        modifier = Modifier\n            .fillMaxSize()\n            .padding(24.dp),\n        verticalArrangement = Arrangement.spacedBy(16.dp, Alignment.CenterVertically),\n        horizontalAlignment = Alignment.CenterHorizontally\n    ) {\n        Text(\"Mindikot Lobby\", style = MaterialTheme.typography.headlineMedium)\n\n        OutlinedTextField(\n            value = playerName,\n            onValueChange = { playerName = it },\n            label = { Text(\"Enter your name\") }\n        )\n\n        Text(\"Select Game Mode:\")\n        Row(horizontalArrangement = Arrangement.spacedBy(8.dp)) {\n            Button(onClick = { gameMode = \"CHOOSE_WHEN_EMPTY\" }) {\n                Text(\"Choose When Empty\")\n            }\n            Button(onClick = { gameMode = \"FIRST_CARD_HIDDEN\" }) {\n                Text(\"First Card Hidden\")\n            }\n        }\n\n        Button(\n            onClick = { navController.navigate(\"game\") },\n            enabled = playerName.isNotBlank()\n        ) {\n            Text(\"Start Game\")\n        }\n    }\n}\n",
                "ResultScreen.kt": "package com.example.mindikot.ui.screens\n\nimport androidx.compose.foundation.layout.*\nimport androidx.compose.material3.*\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.unit.dp\nimport androidx.navigation.NavController\n\n@Composable\nfun ResultScreen(navController: NavController) {\n    Column(\n        modifier = Modifier\n            .fillMaxSize()\n            .padding(24.dp),\n        verticalArrangement = Arrangement.Center,\n        horizontalAlignment = Alignment.CenterHorizontally\n    ) {\n        Text(\"Round Results\", style = MaterialTheme.typography.headlineMedium)\n\n        Spacer(modifier = Modifier.height(16.dp))\n\n        Button(onClick = { navController.navigate(\"lobby\") }) {\n            Text(\"Back to Lobby\")\n        }\n    }\n}\n"
            },
            "theme": {
                "Color.kt": "package com.example.mindikot.ui.theme\n\nimport androidx.compose.ui.graphics.Color\n\nval Purple80 = Color(0xFFD0BCFF)\nval PurpleGrey80 = Color(0xFFCCC2DC)\nval Pink80 = Color(0xFFEFB8C8)\n\nval Purple40 = Color(0xFF6650a4)\nval PurpleGrey40 = Color(0xFF625b71)\nval Pink40 = Color(0xFF7D5260)\n",
                "Theme.kt": "package com.example.mindikot.ui.theme\n\nimport androidx.compose.foundation.isSystemInDarkTheme\nimport androidx.compose.material3.*\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.platform.LocalContext\n\nprivate val LightColors = lightColorScheme(\n    primary = Purple40,\n    secondary = PurpleGrey40,\n    tertiary = Pink40\n)\n\n@Composable\nfun MindikotTheme(\n    useDarkTheme: Boolean = isSystemInDarkTheme(),\n    content: @Composable () -> Unit\n) {\n    MaterialTheme(\n        colorScheme = LightColors,\n        typography = Typography(),\n        content = content\n    )\n}\n"
            }
        }
    }
}